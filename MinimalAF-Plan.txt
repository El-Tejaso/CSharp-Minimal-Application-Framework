[Final features] TODO:

FINAL FEATURE :0
		
	- feature: Modify public properties during test with test harness, autogenerate UI for this. Make this element something that will wrap a component rather than something as part of the test harness, so that people can make more complicated test harnesses. Hopefully it can be a floating window that can connect to an arbitrary element that can hide/show, resize, and move. This feature would actually make this 'framework' useful imo
		-* Remove restart button, make it into a floating window that can be dragged and hidden/shown. The window is only 80% the height of the window, and you need to scroll to get to all the inputs and stuff.
		-* Create attributes that we can put onto a field in a test to see what UI we can use to controll it in the test
		-* The window with the variables and stuff should be overlaying the actual tests, and should be toggleable with escape
		-* foreach(f in typeof(test).fields): createCorrespondingUI(f)
		-* We should restrict what types the UI can support. 
			- string - text input
			- number - slideable text input, slider
			- enum 
		-* 
	
	
	
	
Backlog: 
	- 3D lighting shaders

	-* Run arbitrary C# code	
	
	-* Python interop
		
	- fix: implement Disposable for Audiosource and possibly other classes
		since they are now pooled
			
	- test: Add unit tests for renderbuffer
		-* find rare memory corruption bug that may now be fixed
	
	- make stencil stack-based somehow
	
		
	-* Analyse allocations, we are getting a lot of GC pauses
		- only in debug mode though, and not in release
	
	-* PushDepth, something like pushmatrix but we're settign the 2D depth temporarily. it's like Z-Index in HTML but actually useful
	
	-* Try to understand how the depth is working, and why it doesnt work for 
	numbers greater than 1. Near far clipping planes?
	
	-* figure out what we should do with PushMatrix, now that we have other ways of setting the matrix wich will probably be better
	
Distant future:
	- feature: Some way to see the element tree in the test harness
		- Will need to be root-node-state based and done in AfterRender. Also figure out some way to move debug overlay to here as well	
		
	- feature: Add dynamic compilation (in general, not just test harness)
		-* find that ms doc page about c# dynamic compilation
		
	- fix: Why is it taking up so much memory in RAM. reduce this
	
	