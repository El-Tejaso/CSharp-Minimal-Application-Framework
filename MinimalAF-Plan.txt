Doing:
	- Move to Silk.Net
		- Mainly because Viewport and Scissor weren't workign with OpenTK, and they are somewhat essential
		- and it looks like theyve made a bunch of other good changes
		
		- I dont like how they've done some of the stuff, but it seems like most of it will just work with minimal effort


TODO:
	- Give Elements their own coordinate systems, and drawing capabilities.
		- Elements will need an ability to store the state of the drawing context
		- make CTX internal, and all drawing handled by Element

	- Test harness that collates all unit tests
		- An Attribute is used to mark tests
			- This feature may be quite easy
		
		- Add dynamic compilation in future
			- This feature may be quite hard
			
	- Start using Scissor instead of stencil
			
	- Add HSV to Color4
	
	

Done so far:
	- Seperate app config and window management from Rendering and updating code. 
		- Move all drawing code into UIElement
		- Split UIElement into multiple files, since it will be big

	- Enough with this wrapper pattern in CTX and Input.
		- rather than CTX.DrawRectangle, do 
			CTX.Rectangle.Draw();
			
			So I have far less code to maintain
			
	- Move datatypes to where they are needed. Make them Core if they are cross-cutting
		- Removed useless/bad datastructures
	
	- Figure out some way to use System.Drawing.Color because it has a lot more builtin colors
		- added all named colors from wikipedia

Later:
 
	- Framebuffer optimization
		- texture buffer resizing [Texture.cs ln 68]
			- currently created with new() each time

	- Custom render pipelines
		- boils down to rendering the same scene and all differently

	- implement Disposable for Audiosource and 	possibly other classes
		since they are now pooled
		
	- Add unit tests for renderbuffer
		- find rare memory corruption that may now be fixed
		
	- Strip down CTX class. Alot of useless stuff there imo

Later later:

	- C# dynamic compilation	