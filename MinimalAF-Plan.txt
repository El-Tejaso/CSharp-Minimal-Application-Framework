[Final features] TODO:
	- 3D and non-immediate mode support
		Allowing generic vertices for meshes has caused a significant amount of complexity that I can't be bothered maintaining.
		tasks:
			- [done] Re-add generic vertices for meshes
			- [done] test OBJ loading and rendering

	- [done] Fix framebuffer implementation and API
	
	- [done] make RedirectRenderCalls something that is stack-based like using(RedirectRenderCalls(x)) {} rather than Redirect(x), Redurect(null)
	
	-> Allow immediate mode methods to put vertices into a MeshData object, do some refactoring
			
	-* feature: Modify public properties during test with test harness, autogenerate UI for this. Make this element something that will wrap a component rather than something as part of the test harness, so that people can make more complicated test harnesses. Hopefully it can be a floating window that can connect to an arbitrary element that can hide/show, resize, and move.
	
	- 3D lighting shaders
	
	
Backlog: 
	-* Run arbitrary C# code
	
	-* Python interop
		
	- fix: implement Disposable for Audiosource and possibly other classes
		since they are now pooled
			
	- test: Add unit tests for renderbuffer
		-* find rare memory corruption bug that may now be fixed
	
	- make stencil stack-based somehow
	
		
	-* Analyse allocations, we are getting a lot of GC pauses
		- only in debug mode though, and not in release
	
	-* PushDepth, something like pushmatrix but we're settign the 2D depth temporarily. it's like Z-Index in HTML but actually useful
	
	-* Try to understand how the depth is working, and why it doesnt work for 
	numbers greater than 1. Near far clipping planes?
	
	-* figure out what we should do with PushMatrix, now that we have other ways of setting the matrix wich will probably be better
	
Distant future:
	- feature: Some way to see the element tree in the test harness
		- Will need to be root-node-state based and done in AfterRender. Also figure out some way to move debug overlay to here as well	
		
	- feature: Add dynamic compilation (in general, not just test harness)
		-* find that ms doc page about c# dynamic compilation
		
	- fix: Why is it taking up so much memory in RAM. reduce this
	
	