These are the final features. Once I have added these, I will stop adding new features, untill I need them for the things I develop with this
TODO:
	- 3D and non-immediate mode support
		Allowing generic vertices for meshes has caused a significant amount of complexity that I can't be bothered maintaining.
		tasks:
			- [done] Remove generics from meshes, and just add things to the
			vertex class as needed.
				- Going to make vertices generic again, as there are a lot of use cases that may or may not be worth it. A few simplifications:
					-* I will not be template-replacing the field names.
					-* The end user will need to be extra smart about their struct field placements. If we want to use position, UV, color, etc, and also want to reuse the same shaders for all vertex types, you need to have one fixed order in which each thing will apear, and 5 different vertex structs. Ideally, you will just have 1 lightweight vertex for immediate mode stuff with just a vertex and possibly uv, one for general purpose stuff with normals and possibly tangents, and then others for more experimental stuff that will have colors, what have you.
					all shaders and structs must then be unified. yeah you get the picture
				
				- thinking again, and I think they are fine.
			- [done] test OBJ loading and rendering
			
	- 3D lighting shaders
		
	-* Allow immediate mode to render to a MeshData object, do some refactoring
		
	-* Fix framebuffer implementation
			
	-* feature: Modify public properties during test with test harness, autogenerate UI for this. Make this element something that will wrap a component rather than something as part of the test harness, so that people can make more complicated test harnesses. Hopefully it can be a floating window that can connect to an arbitrary element that can hide/show, resize, and move.
	
	
	
Backlog: 
	-* Run arbitrary C# code
	
	-* Python interop
		
	- fix: implement Disposable for Audiosource and possibly other classes
		since they are now pooled
			
	- test: Add unit tests for renderbuffer
		-* find rare memory corruption bug that may now be fixed
	
	- make stencil stack-based somehow
	
		
	-* Analyse allocations, we are getting a lot of GC pauses
		- only in debug mode though, and not in release
	
	-* PushDepth, something like pushmatrix but we're settign the 2D depth temporarily. it's like Z-Index in HTML but actually useful
	
	-* Try to understand how the depth is working, and why it doesnt work for 
	numbers greater than 1. Near far clipping planes?
	
	-* figure out what we should do with PushMatrix, now that we have other ways of setting the matrix wich will probably be better
	
Distant future:
	- feature: Some way to see the element tree in the test harness
		- Will need to be root-node-state based and done in AfterRender. Also figure out some way to move debug overlay to here as well	
		
	- feature: Add dynamic compilation (in general, not just test harness)
		-* find that ms doc page about c# dynamic compilation
		
	- fix: Why is it taking up so much memory in RAM. reduce this
	
	